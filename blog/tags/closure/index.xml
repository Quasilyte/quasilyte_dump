<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[closure] on Iskander (Alex) Sharipov technical blog</title>
    <link>https://quasilyte.dev/blog/tags/closure/</link>
    <description>Recent content in [closure] on Iskander (Alex) Sharipov technical blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://quasilyte.dev/blog/tags/closure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go nested functions and static locals</title>
      <link>https://quasilyte.dev/blog/post/go-nested-functions-and-static-locals/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/go-nested-functions-and-static-locals/</guid>
      <description>Symbol visibility Default symbol visibility should be as narrow as possible. This means that you use globals with internal linkage instead of external, local variables rather than globals, hide class-related constants inside it&amp;rsquo;s scope, and so on.
If function is only called inside particular function, it should become a nested function.
Most of these rely on the language support.
Go has quite simple model of scopes and symbol visibility. User-defined identifier can be local or package-local (global).</description>
    </item>
    
  </channel>
</rss>
