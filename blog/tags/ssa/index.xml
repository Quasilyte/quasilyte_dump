<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[ssa] on Iskander (Alex) Sharipov technical blog</title>
    <link>https://quasilyte.dev/blog/tags/ssa/</link>
    <description>Recent content in [ssa] on Iskander (Alex) Sharipov technical blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://quasilyte.dev/blog/tags/ssa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A simpler scheme than SSA</title>
      <link>https://quasilyte.dev/blog/post/naive-ssa-alternative/</link>
      <pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/naive-ssa-alternative/</guid>
      <description>The SSA complexities Let&amp;rsquo;s suppose that you&amp;rsquo;re working on some small compiler-like project. At some point, you may start thinking about adding optimizations to the code generated by your compiler.
Then you realize that it&amp;rsquo;s not enough to just have some IR that is suitable for modifications. It&amp;rsquo;s important to apply only those optimizations that keep the code correct (or at least don&amp;rsquo;t make it more broken than it was before).</description>
    </item>
    
    <item>
      <title>Go compiler: SSA optimization rules description language</title>
      <link>https://quasilyte.dev/blog/post/go_ssa_rules/</link>
      <pubDate>Sat, 30 Jun 2018 18:53:25 +0000</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/go_ssa_rules/</guid>
      <description>Original (ru): https://habr.com/post/415771/.
 Go compiler uses its own Lisp-like domain-specific language (DSL) for Static Single Assignment (SSA) optimization rules description.
Lets dig into that language, its peculiarities and limitations. As an excercise, we&amp;rsquo;ll add a new optimization rule into Go compiler that would optimize expressions like a*b+c using new operations we&amp;rsquo;re going to implement along the way.
This is the first article in the series about Go compiler SSA backend, this is why I&amp;rsquo;ve included some fundamental and architectural info besides DSL overview.</description>
    </item>
    
  </channel>
</rss>
