<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[tutorial] on Iskander (Alex) Sharipov technical blog</title>
    <link>https://quasilyte.dev/blog/tags/tutorial/</link>
    <description>Recent content in [tutorial] on Iskander (Alex) Sharipov technical blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 May 2023 20:19:08 +0000</lastBuildDate><atom:link href="https://quasilyte.dev/blog/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Game development in Go: Ebitengine shaders</title>
      <link>https://quasilyte.dev/blog/post/ebitengine-shaders/</link>
      <pubDate>Mon, 01 May 2023 20:19:08 +0000</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/ebitengine-shaders/</guid>
      <description>Hello, my friend. Stay awhile and listen!
Does game development in Go programming language fascinate you? You&amp;rsquo;ve come to the right place!
Today I want to share some of my Ebitengine shaders experience with you. Most of the examples I&amp;rsquo;ll use and refer to come from my Roboden and Decipherism open-source games. You can find their sources on GitHub.
Without further ado, let&amp;rsquo;s do it!
A Brief Shaders Intro I&amp;rsquo;ll only talk about fragment shaders (also known as pixel shaders) because those are the only ones supported in Ebitengine.</description>
    </item>
    
    <item>
      <title>gogrep: structural search and replace</title>
      <link>https://quasilyte.dev/blog/post/gogrep/</link>
      <pubDate>Sun, 07 Jun 2020 14:11:49 +0000</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/gogrep/</guid>
      <description>If you found a typo or a misspelling, please [file an issue](https://github.com/quasilyte/blog-src/issues/new) or send a PR that fixes it.  Original (ru): https://habr.com/post/481696/.
 gogrep is one of my favorite tools. It gives you the ability to search Go code using syntax patterns, filter matches by expression types, and perform structural replace.
Today I&amp;rsquo;ll talk about how to use gogrep and about VS Code extension that integrates gogrep into the editor.</description>
    </item>
    
    <item>
      <title>RISC-V: custom instruction and its simulation</title>
      <link>https://quasilyte.dev/blog/post/riscv32-custom-instruction-and-its-simulation/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://quasilyte.dev/blog/post/riscv32-custom-instruction-and-its-simulation/</guid>
      <description>Agenda This article shows how to add a new instruction to RISC-V and simulate it.
These topics are covered along the way:
 Whole GNU riscv toolchain installation; Implementation of a new instruction for spike RISC-V ISA simulator; Manual instruction encoding in C/C++; Custom instruction simulation (with visible output); [riscv32-]GCC plugin development;  You may find associated repository useful.
Many things can go wrong. Be prepared to fix upcoming issues by yourself.</description>
    </item>
    
  </channel>
</rss>
